<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_365037_expense_m_transaction_history</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_365037_expense_m_transaction_history">reference_trx_id=''^ORreference_trx_idISEMPTY^EQ<item endquery="false" field="reference_trx_id" goto="false" newquery="false" operator="=" or="false" value="''"/>
            <item endquery="false" field="reference_trx_id" goto="false" newquery="false" operator="ISEMPTY" or="true" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Insert related Group Balance Record </name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here
	var fromuser=current.from_user.user_name;

	var toUser=current.to_user.user_name;
	var formAmount=current.u_decimal_2;
	
	var approvalBy='gokern.tripathi';
	
	
	// finding dummygroupuser
	
	var gp = new GlideRecord('x_365037_expense_m_user_balance');
	gp.addQuery('user_name', 'ExpenseGroupUser');
	gp.query();
	var dummyUser;	
	if(gp.hasNext()){
		gp.next();
		dummyUser=gp.getValue('user_name');
	}
	
	
	if(current.transaction_type=='Group Contribution'){
		gr = new GlideRecord('x_365037_expense_m_user_balance');
		gr.addQuery('user_name', fromuser);
		gr.query();
		if(gr.hasNext()){
			gr.next();
		
			//update total amount field
			//var formAmount=current.u_decimal_2;
			/*var amount=gr.getValue('balance_amount');
			amount=parseFloat(amount)+parseFloat(formAmount);
			gr.setValue('balance_amount',amount);
        
			//update group amount field
			var groupAmount = gr.getValue('group_amount');
			groupAmount = parseFloat(groupAmount)+parseFloat(formAmount);
			gr.setValue('group_amount', groupAmount);*/
		
			gr.update();
		}
		
		// transaction table changes
		var trans='Group Contribution';
		var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
			transHistoryRecord.initialize();
			transHistoryRecord.setValue('transaction_type', trans);
			transHistoryRecord.setValue('from_user', dummyUser);
			transHistoryRecord.setValue('u_decimal_2', current.u_decimal_2);
			transHistoryRecord.setValue('to_user', userName);
			transHistoryRecord.setValue('status', current.status);
			transHistoryRecord.setValue('category', 'Group Contribution');
			transHistoryRecord.setValue('comment', current.comment);
		    transHistoryRecord.setValue('trx_date', current.trx_date);
			transHistoryRecord.setValue('reference_trx_id', current.number);
            
			transHistoryRecord.insert();
	
		// end here for group contribution
	}else if(current.transaction_type=='Group Expense'){
	
		var count;
		
		var v= current.split_in_all;
	
		//doing group entry
		/*var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
		transHistoryRecord.initialize();
		transHistoryRecord.setValue('transaction_type', current.transaction_type);
		transHistoryRecord.setValue('from_user', 'GroupFundUser');
		//var shareAmount = current.u_decimal_2/(splitedList.length);
		transHistoryRecord.setValue('u_decimal_2', formAmount);
		//transHistoryRecord.setValue('to_user', gr.getValue('user_name'));
		transHistoryRecord.setValue('status', current.status);
		transHistoryRecord.setValue('category', current.category);
		transHistoryRecord.setValue('comment', current.comment);
		transHistoryRecord.setValue('reference_trx_id', current.number);
		transHistoryRecord.insert();*/
		
	
	if(current.split_in_all){
		var gr = new GlideRecord('x_365037_expense_m_user_balance');
		gr.addQuery('isactive','true');
		gr.query();
		count = gr.getRowCount();
		
		
		while(gr.hasNext()){
			gr.next();
			
			//update total amount field.
			/*var amount=gr.getValue('balance_amount');
			amount=amount-formAmount/count;
			gr.setValue('balance_amount',amount);
        
			//update group amount field.
			var groupAmount = gr.getValue('group_amount');
			groupAmount = groupAmount - (formAmount/count);
			gr.setValue('group_amount', groupAmount);
        
			gr.update();*/
			
			
			// new code to insert in transaction
			
			var v1= current.transaction_type;
			var v2= current.category;
			var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
            transHistoryRecord.initialize();
			transHistoryRecord.setValue('transaction_type', current.transaction_type);
            transHistoryRecord.setValue('from_user', gr.getValue('user_name'));
			//gs.addInfoMessage(gr.getValue('user_name'));
            //var shareAmount = current.u_decimal_2/(splitedList.length);
            transHistoryRecord.setValue('u_decimal_2', -1*formAmount/count);
            //transHistoryRecord.setValue('to_user', gr.getValue('user_name'));
            transHistoryRecord.setValue('status', current.status);
            transHistoryRecord.setValue('category', current.category);
            transHistoryRecord.setValue('comment', current.comment);
		    transHistoryRecord.setValue('trx_date', current.trx_date);
            transHistoryRecord.setValue('reference_trx_id', current.number);
			transHistoryRecord.insert();
		}
		
		
	}else{
		var splitedList=current.u_glide_list_2.split(',');
		count=splitedList.length;
		for(var i=0;i<count;i++){
			for(var i =0;i<splitedList.length;i++){
				var userName;
				var gr = new GlideRecord('x_365037_expense_m_user_balance');
				gr.addQuery('sys_id',splitedList[i]);
				gr.query();
				while(gr.hasNext()){
					gr.next();
					userName = gr.getValue('user_name');
					
					//insert record into transaction history table.
					var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
					transHistoryRecord.initialize();
					transHistoryRecord.setValue('transaction_type', current.transaction_type);
					transHistoryRecord.setValue('from_user', userName);
					var shareAmount = current.u_decimal_2/(count);
					transHistoryRecord.setValue('u_decimal_2', -1*shareAmount);
					transHistoryRecord.setValue('to_user', userName);
					transHistoryRecord.setValue('status', current.status);
					transHistoryRecord.setValue('category', current.category);
					transHistoryRecord.setValue('comment', current.comment);
					transHistoryRecord.setValue('trx_date', current.trx_date);
					transHistoryRecord.setValue('reference_trx_id', current.number);
            
					transHistoryRecord.insert();
				}
            
				
		
			}
		}
	
	}
	
	
	

	gr = new GlideRecord('x_365037_expense_m_user_balance');
	gr.addQuery('user_name', fromuser);
	gr.query();
	if(gr.hasNext()){
		gr.next();
		var roleType=gr.getValue('role_type');
        if(roleType=='Admin' && current.u_boolean_1){
				
		}else{
			//update total amount field
			/*var formAmount=current.u_decimal_2;
			var amount=gr.getValue('balance_amount');
			amount=parseFloat(amount)+parseFloat(formAmount);
			gr.setValue('balance_amount',amount);
            
			//update group amount field
			var groupAmount = gr.getValue('group_amount');
			groupAmount = parseFloat(groupAmount)+parseFloat(formAmount);
			gr.setValue('group_amount', groupAmount);
            
			gr.update();*/
			
			var trans='Group Contribution';
			var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
			transHistoryRecord.initialize();
			transHistoryRecord.setValue('transaction_type', trans);
			transHistoryRecord.setValue('from_user', current.from_user);
			transHistoryRecord.setValue('u_decimal_2', current.u_decimal_2);
			transHistoryRecord.setValue('to_user', userName);
			transHistoryRecord.setValue('status', current.status);
			transHistoryRecord.setValue('category', 'Group Contribution');
			transHistoryRecord.setValue('comment', current.comment);
		    transHistoryRecord.setValue('trx_date', current.trx_date);
			transHistoryRecord.setValue('reference_trx_id', current.number);
			//transHistoryRecord.setValue('approved_by',approvalBy);
            
			transHistoryRecord.insert();
			
			// inserting groupFundUser data
			var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
			transHistoryRecord.initialize();
			transHistoryRecord.setValue('transaction_type', trans);
			transHistoryRecord.setValue('from_user', dummyUser);
			transHistoryRecord.setValue('u_decimal_2', current.u_decimal_2);
			transHistoryRecord.setValue('to_user', userName);
			transHistoryRecord.setValue('status', current.status);
			transHistoryRecord.setValue('category', 'Group Contribution');
			transHistoryRecord.setValue('comment', current.comment);
		    transHistoryRecord.setValue('trx_date', current.trx_date);
			transHistoryRecord.setValue('reference_trx_id', current.number);
            
			transHistoryRecord.insert();
		}
	}
		
		// since its expense so make it negative
		current.u_decimal_2= -1*formAmount;
		current.from_user=dummyUser;
	
}else{
		
	var gr = new GlideRecord('x_365037_expense_m_user_balance');
	gr.addQuery('user_name', toUser);
	gr.query();
	if(gr.hasNext()){
		gr.next();
		/*var amount=gr.getValue('balance_amount');
		var formAmount=current.u_decimal_2;
		amount=amount-formAmount;
		gr.setValue('balance_amount',amount);
		gr.update();*/
	}

	gr = new GlideRecord('x_365037_expense_m_user_balance');
	gr.addQuery('user_name', fromuser);
	gr.query();
	if(gr.hasNext()){
		gr.next();
		/*var amount=gr.getValue('balance_amount');
		var formAmount=current.u_decimal_2;
		amount=parseFloat(amount)+parseFloat(formAmount);
		gr.setValue('balance_amount',amount);
		gr.update();*/
	}
	
	var gp = new GlideRecord('x_365037_expense_m_personal_transactions_data');
	gp.addQuery('paid_by', fromuser);
	gp.addQuery('paid_to',toUser);
	//gs.info(fromuser + '  '+ toUser+' line 78');
	gp.query();
	if(gp.hasNext()){
		gp.next();
		/*var amount=gp.getValue('amount');
		var formAmount=current.u_decimal_2;
		amount=parseFloat(amount)+parseFloat(formAmount);
		gp.setValue('amount',amount);
		gp.update();*/
	}else{
		var gr = new GlideRecord('x_365037_expense_m_personal_transactions_data');
		gr.initialize();
		var formAmount=current.u_decimal_2;
		//gs.info(formAmount+ '  line 91');
		//gs.info(current.to_user + '  '+ current.from_user+' line 92');
		gr.setValue('paid_to',toUser);
		gr.setValue('paid_by',fromuser);
		gr.setValue('amount',formAmount);
		gr.insert();
	}
	
	var gp = new GlideRecord('x_365037_expense_m_personal_transactions_data');
	gp.addQuery('paid_by',toUser);
	gp.addQuery('paid_to',fromuser);
	gp.query();
	if(gp.hasNext()){
		gp.next();
		var amount=gp.getValue('amount');
		var formAmount=current.u_decimal_2;
		amount=amount-formAmount;
		gp.setValue('amount',amount);
		gp.update();
	}else{
		var gr = new GlideRecord('x_365037_expense_m_personal_transactions_data');
		gr.initialize();
		var formAmount=current.u_decimal_2 * -1;
		//gs.info(formAmount+ '  line 114');
		//gs.info(current.to_user + '  '+ current.from_user+' line 113');
		gr.setValue('paid_to',fromuser);
		gr.setValue('paid_by',toUser);
		gr.setValue('amount',formAmount);
		gr.insert();
	}
	
	
}

//current.approved_by=approvalBy;

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-03 11:46:29</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>72513cafdbd23300e70758b3ca9619ca</sys_id>
        <sys_mod_count>17</sys_mod_count>
        <sys_name>Insert related Group Balance Record </sys_name>
        <sys_overrides/>
        <sys_package display_value="Expense Management" source="x_365037_expense_m">0b071443db023300e70758b3ca961957</sys_package>
        <sys_policy/>
        <sys_scope display_value="Expense Management">0b071443db023300e70758b3ca961957</sys_scope>
        <sys_update_name>sys_script_72513cafdbd23300e70758b3ca9619ca</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-04 14:49:54</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=72513cafdbd23300e70758b3ca9619ca"/>
</record_update>
