<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>approve</action_name>
        <active>true</active>
        <client>false</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments>Approving the transaction</comments>
        <condition>current.status=='Pending' &amp;&amp;((current.transaction_type=='Group Expense' &amp;&amp; current.reference_trx_id=='')||(current.transaction_type=='Group Contribution' &amp;&amp; current.from_user.user_name !='ExpenseGroupUser')) &amp;&amp; current.approved_by==gs.getUserName() </condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <name>Approve</name>
        <onclick>approve()</onclick>
        <order>100</order>
        <script><![CDATA[current.status='Approved';
current.update();
//((current.status=='Pending' )&& (((current.transaction_type=='Group Contribution' || current.transaction_type=='Group Expense') && current.approved_by==gs.getUserName()) ) )
/*var fromuser=current.from_user.user_name;

var toUser=current.to_user.user_name;
if(current.transaction_type=='Group Contribution'){
	gr = new GlideRecord('x_365037_expense_m_user_balance');
	gr.addQuery('user_name', fromuser);
	gr.query();
	if(gr.hasNext()){
		gr.next();
		
		//update total amount field
        var formAmount=current.u_decimal_2;
        var amount=gr.getValue('balance_amount');
        amount=parseFloat(amount)+parseFloat(formAmount);
        gr.setValue('balance_amount',amount);
        
        //update group amount field
        var groupAmount = gr.getValue('group_amount');
        groupAmount = parseFloat(groupAmount)+parseFloat(formAmount);
        gr.setValue('group_amount', groupAmount);
		
		gr.update();
	}
	
}else if(current.transaction_type=='Group Expense'){
	
	var count;
	var formAmount=current.u_decimal_2;
	var v= current.split_in_all;
	if(current.split_in_all){
		var gr = new GlideRecord('x_365037_expense_m_user_balance');
		gr.addQuery('isactive','true');
		gr.query();
		count = gr.getRowCount();
		
		
		while(gr.hasNext()){
			gr.next();
			
			//update total amount field.
			var amount=gr.getValue('balance_amount');
			amount=amount-formAmount/count;
			gr.setValue('balance_amount',amount);
        
			//update group amount field.
			var groupAmount = gr.getValue('group_amount');
			groupAmount = groupAmount - (formAmount/count);
			gr.setValue('group_amount', groupAmount);
        
			gr.update();
			var v1= current.transaction_type;
			var v2= current.category;
			var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
            transHistoryRecord.initialize();
			transHistoryRecord.setValue('transaction_type', current.transaction_type);
            transHistoryRecord.setValue('from_user', current.from_user);
            //var shareAmount = current.u_decimal_2/(splitedList.length);
            transHistoryRecord.setValue('u_decimal_2', formAmount/count);
            transHistoryRecord.setValue('to_user', gr.getValue('user_name'));
            transHistoryRecord.setValue('status', current.status);
            transHistoryRecord.setValue('category', current.category);
            transHistoryRecord.setValue('comment', current.comment);
            transHistoryRecord.setValue('reference_trx_id', current.number);
			transHistoryRecord.insert();
		}
		
		
	}else{
		var splitedList=current.u_glide_list_2.split(',');
		count=splitedList.length;
		for(var i=0;i<count;i++){
			for(var i =0;i<splitedList.length;i++){
				var userName;
				var gr = new GlideRecord('x_365037_expense_m_user_balance');
				gr.addQuery('sys_id',splitedList[i]);
				gr.query();
				while(gr.hasNext()){
					gr.next();
					userName = gr.getValue('user_name');
					
					//insert record into transaction history table.
					var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
					transHistoryRecord.initialize();
					transHistoryRecord.setValue('transaction_type', current.transaction_type);
					transHistoryRecord.setValue('from_user', current.from_user);
					var shareAmount = current.u_decimal_2/(count);
					transHistoryRecord.setValue('u_decimal_2', shareAmount);
					transHistoryRecord.setValue('to_user', userName);
					transHistoryRecord.setValue('status', current.status);
					transHistoryRecord.setValue('category', current.category);
					transHistoryRecord.setValue('comment', current.comment);
					transHistoryRecord.setValue('reference_trx_id', current.number);
            
					transHistoryRecord.insert();
				}
            
				
		
			}
		}
	
	}
	
	
	
	
	

	gr = new GlideRecord('x_365037_expense_m_user_balance');
	gr.addQuery('user_name', fromuser);
	gr.query();
	if(gr.hasNext()){
		gr.next();
		var isAdmin=gr.getValue('isadmin');
        if(isAdmin=='true' && current.u_boolean_1){
				
		}else{
			//update total amount field
			var formAmount=current.u_decimal_2;
			var amount=gr.getValue('balance_amount');
			amount=parseFloat(amount)+parseFloat(formAmount);
			gr.setValue('balance_amount',amount);
            
			//update group amount field
			var groupAmount = gr.getValue('group_amount');
			groupAmount = parseFloat(groupAmount)+parseFloat(formAmount);
			gr.setValue('group_amount', groupAmount);
            
			gr.update();
			
			var trans='Group Contribution';
			var transHistoryRecord = new GlideRecord('x_365037_expense_m_transaction_history');
			transHistoryRecord.initialize();
			transHistoryRecord.setValue('transaction_type', trans);
			transHistoryRecord.setValue('from_user', current.from_user);
			transHistoryRecord.setValue('u_decimal_2', current.u_decimal_2);
			transHistoryRecord.setValue('to_user', userName);
			transHistoryRecord.setValue('status', current.status);
			transHistoryRecord.setValue('category', 'Group Contribution');
			transHistoryRecord.setValue('comment', current.comment);
			transHistoryRecord.setValue('reference_trx_id', current.number);
            
			transHistoryRecord.insert();
		}
	}
			
	
}else{
		
	var gr = new GlideRecord('x_365037_expense_m_user_balance');
	gr.addQuery('user_name', toUser);
	gr.query();
	if(gr.hasNext()){
		gr.next();
		var amount=gr.getValue('balance_amount');
		var formAmount=current.u_decimal_2;
		amount=amount-formAmount;
		gr.setValue('balance_amount',amount);
		gr.update();
	}

	gr = new GlideRecord('x_365037_expense_m_user_balance');
	gr.addQuery('user_name', fromuser);
	gr.query();
	if(gr.hasNext()){
		gr.next();
		var amount=gr.getValue('balance_amount');
		var formAmount=current.u_decimal_2;
		amount=parseFloat(amount)+parseFloat(formAmount);
		gr.setValue('balance_amount',amount);
		gr.update();
	}
	
	var gp = new GlideRecord('x_365037_expense_m_personal_transactions_data');
	gp.addQuery('paid_by', fromuser);
	gp.addQuery('paid_to',toUser);
	gs.info(fromuser + '  '+ toUser+' line 78');
	gp.query();
	if(gp.hasNext()){
		gp.next();
		var amount=gp.getValue('amount');
		var formAmount=current.u_decimal_2;
		amount=parseFloat(amount)+parseFloat(formAmount);
		gp.setValue('amount',amount);
		gp.update();
	}else{
		var gr = new GlideRecord('x_365037_expense_m_personal_transactions_data');
		gr.initialize();
		var formAmount=current.u_decimal_2;
		gs.info(formAmount+ '  line 91');
		gs.info(current.to_user + '  '+ current.from_user+' line 92');
		gr.setValue('paid_to',toUser);
		gr.setValue('paid_by',fromuser);
		gr.setValue('amount',formAmount);
		gr.insert();
	}
	
	var gp = new GlideRecord('x_365037_expense_m_personal_transactions_data');
	gp.addQuery('paid_by',toUser);
	gp.addQuery('paid_to',fromuser);
	gp.query();
	if(gp.hasNext()){
		gp.next();
		var amount=gp.getValue('amount');
		var formAmount=current.u_decimal_2;
		amount=amount-formAmount;
		gp.setValue('amount',amount);
		gp.update();
	}else{
		var gr = new GlideRecord('x_365037_expense_m_personal_transactions_data');
		gr.initialize();
		var formAmount=current.u_decimal_2 * -1;
		gs.info(formAmount+ '  line 114');
		gs.info(current.to_user + '  '+ current.from_user+' line 113');
		gr.setValue('paid_to',fromuser);
		gr.setValue('paid_by',toUser);
		gr.setValue('amount',formAmount);
		gr.insert();
	}
	
	
}


current.update();*/]]></script>
        <show_insert>true</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-06-20 10:49:53</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>1808a9d3dbc23300e70758b3ca961951</sys_id>
        <sys_mod_count>90</sys_mod_count>
        <sys_name>Approve</sys_name>
        <sys_overrides/>
        <sys_package display_value="Expense Management" source="x_365037_expense_m">0b071443db023300e70758b3ca961957</sys_package>
        <sys_policy/>
        <sys_scope display_value="Expense Management">0b071443db023300e70758b3ca961957</sys_scope>
        <sys_update_name>sys_ui_action_1808a9d3dbc23300e70758b3ca961951</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-04 07:08:00</sys_updated_on>
        <table>x_365037_expense_m_transaction_history</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
